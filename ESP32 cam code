#include "esp_camera.h"
#include <WiFi.h>
#include "esp_timer.h"
#include "img_converters.h"
#include "Arduino.h"
#include "fb_gfx.h"
#include "soc/soc.h"             
#include "soc/rtc_cntl_reg.h"    
#include "esp_http_server.h"



// Replace with your network credentials
const char* ssid = "Patcho";
const char* password = "12345678";



#define PART_BOUNDARY "123456789000000000000987654321"
// ploƒçica mora biti AI thinker
#define CAMERA_MODEL_AI_THINKER
//#define CAMERA_MODEL_WROVER_KIT

#if defined(CAMERA_MODEL_WROVER_KIT)
  #define PWDN_GPIO_NUM    -1
  #define RESET_GPIO_NUM   -1
  #define XCLK_GPIO_NUM    21
  #define SIOD_GPIO_NUM    26
  #define SIOC_GPIO_NUM    27
  
  #define Y9_GPIO_NUM      35
  #define Y8_GPIO_NUM      34
  #define Y7_GPIO_NUM      39
  #define Y6_GPIO_NUM      36
  #define Y5_GPIO_NUM      19
  #define Y4_GPIO_NUM      18
  #define Y3_GPIO_NUM       5
  #define Y2_GPIO_NUM       4
  #define VSYNC_GPIO_NUM   25
  #define HREF_GPIO_NUM    23
  #define PCLK_GPIO_NUM    22



#elif defined(CAMERA_MODEL_AI_THINKER)
  #define PWDN_GPIO_NUM     32
  #define RESET_GPIO_NUM    -1
  #define XCLK_GPIO_NUM      0
  #define SIOD_GPIO_NUM     26
  #define SIOC_GPIO_NUM     27
  
  #define Y9_GPIO_NUM       35
  #define Y8_GPIO_NUM       34
  #define Y7_GPIO_NUM       39
  #define Y6_GPIO_NUM       36
  #define Y5_GPIO_NUM       21
  #define Y4_GPIO_NUM       19
  #define Y3_GPIO_NUM       18
  #define Y2_GPIO_NUM        5
  #define VSYNC_GPIO_NUM    25
  #define HREF_GPIO_NUM     23
  #define PCLK_GPIO_NUM     22



#else
  #error "Camera model not selected"
#endif


static const char* _STREAM_CONTENT_TYPE = "multipart/x-mixed-replace;boundary=" PART_BOUNDARY;
static const char* _STREAM_BOUNDARY = "\r\n--" PART_BOUNDARY "\r\n";
static const char* _STREAM_PART = "Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n";



httpd_handle_t camera_httpd = NULL;
httpd_handle_t stream_httpd = NULL;


static const char PROGMEM INDEX_HTML[] = R"rawliteral(
<!DOCTYPE html>
<html>
<style>
   html {
    font-family: Arial, Helvetica, sans-serif;
    display: inline-block;
    text-align: center;
  }
  #button1 {
    background-color: #2f4468;
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 6px 3px;
    cursor: pointer;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    align-self:centar;
    grid-column: 2 / 3;
    grid-row: 2 / 3;
  }
  .button2 {
    background-color: #0400d3;
    border: none;
    color: white;
    height:auto;
    width:auto;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 6px 3px;
    cursor: pointer;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    grid-column: 2 / 3;
    grid-row: 5 / 6;
    
  }
  #buttonUp {
    background-color: #e90101;
    height:auto;
    width:auto;
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 6px 3px;
    cursor: pointer;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    grid-column: 3 / 4;
    grid-row: 2 / 3;

  }
  #buttonDown {
    background-color: #e90101;
    border: none;
    color: white;
    height:auto;
    width:auto;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 6px 3px;
    cursor: pointer;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    grid-column: 3 / 4;
    grid-row: 4 / 5;

  }
  #buttonRight {
    background-color: #e90101;
    border: none;
    color: white;
    height:auto;
    width:100px;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 6px 3px;
    cursor: pointer;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    grid-column: 4 / 5;
    grid-row: 3 / 4;

  }
  #buttonLeft {
    background-color: #e90101;
    border: none;
    color: white;
    height:auto;
    width:100px;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 6px 3px;
    cursor: pointer;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    grid-column: 2 / 3;
    grid-row: 3 / 4;

  }
  #GlideButton {
    background-color: #e90101;
    border: none;
    color: white;
    height:auto;
    width:100px;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 6px 3px;
    cursor: pointer;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    grid-column: 3 / 4;
    grid-row: 5 / 6;

  }
  #PocetniPolozaj {
    background-color: #ffa600;
    height:auto;
    width:auto;
    border: none;
    color: white;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 18px;
    margin: 6px 3px;
    cursor: pointer;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
    grid-column: 4 / 5;
    grid-row: 5 / 6;
  
  }
  img {  width: auto ;
    max-width: 100% ;
    height: auto ; 
  }
  h1 {
    font-size: 1.8rem;
    color: white;
  }
  p {
    font-size: 1.4rem;
  }
  .topnav {
    overflow: hidden;
    background-color: #0A1128;
  }
  body {
    margin: 0;
  }
  .content {
    padding: 30px;
  }
  .card-grid {
    max-width: 1500px;
    min-width: 250px;
    margin: 20px auto;
    display: grid;
    grid-gap: 2rem;
    position: relative;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    
  }
  .card {
    background-color: white;
    box-shadow: 2px 2px 12px 1px rgba(140,140,140,.5);
    min-height: 250px;
    height: auto-fit, minmax(200px, 1fr);
    position:relative;
  }
  .card-title1 {
    font-size: 1.2rem;
    font-weight: bold;
    color: #034078;
    box-sizing: content-box;
    align-self:centar;
  }
  .card-title2 {
    font-size: 1.2rem;
    height: auto;
    font-weight: bold;
    color: #034078;
    box-sizing: content-box;
    grid-column: 3 / 4;
    grid-row: 1 / 2;
  }
  .card-title3 {
    font-size: 1.2rem;
    font-weight: bold;
    color: #034078;
    box-sizing: content-box;
    align-self:centar;
    grid-column: 2 / 3;
    grid-row: 1 / 2;
  }
  
  .state {
    font-size: 1.2rem;
    color:#1282A2;
  }
  .switch {
    padding-left: 5%;
    padding-right: 5%;
  }
  .raspored{
    position: absolute;
    height: 100%;
    width: 100%;
    box-sizing: border-box;
    border: 5px;
    padding: 10px;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr ;
    grid-template-rows:1fr 1fr 1fr 1fr 1fr;

  }
  .box1{
    box-sizing: content-box;
    font-size: 20px;
    padding: 5px;
    width: auto;
    height: auto;
    min-width: 80px;
    min-height: 25px;
    max-width: 120px;
    max-height: 25px;
    border: solid 2px black;
    background-color: #ffffff;
  }
  .box2{
    box-sizing: content-box;
    font-size: 20px;
    padding: 5px;
    width: auto;
    height: auto;
    min-width: 80px;
    min-height: 25px;
    max-width: 120px;
    max-height: 25px;
    border: solid 2px rgb(199, 19, 19);
    background-color: #ffffff;
  }

  .box3{
    box-sizing: content-box;
    font-size: 20px;
    padding: 5px;
    width: auto;
    height: auto;
    min-width: 80px;
    min-height: 25px;
    max-width: 120px;
    max-height: 25px;
    border: solid 2px rgb(0, 0, 0);
    background-color: #ffffff;
  }
  .state{
    color: #000000;
    font-size: 20px;
    position: absolute;
    grid-column: 1 / 2;
    grid-row: 3 / 4;
  }
  .state2{
    color: #000000;
    font-size: 20px;
    position: absolute;
    grid-column: 2 / 3;
    grid-row: 3 / 4;
  }
  .state3{
    color: #000000;
    font-size: 20px;
    position: absolute;
    grid-column: 3 / 4;
    grid-row: 3 / 4;
  }
.grid{
  position: absolute;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  display: grid;
  grid-template-columns: 1fr 2fr 3fr 2fr 1fr;
  grid-template-rows:40px 50px 50px 50px 50px ;
}
.grid2{
  position: absolute;
  padding: 10px;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows:1fr 1fr 1fr ;
}
.box4{
  box-sizing: content-box;
  width: auto;
  padding-top: 14px;
  height: auto;
  font-size: 1.2rem;
  background-color: #ffffff;
  grid-column: 3 / 4;
  grid-row: 3 / 4;
  text-align: inherit;
}

#delay{
  height:20px;
  width:50px;
  margin: auto;
  padding: 10px 10px;
  text-align: middle;
  font-size: 16px;
  grid-column: 1 / 2;
  grid-row: 3 / 4;
}
#visina{
  height:20px;
  width:50px;
  margin: auto;
  padding: 10px 10px;
  text-align: middle;
  font-size: 16px;
  grid-column: 3 / 4;
  grid-row: 3 / 4;
}
#PocetniPolozaj2 {
  background-color: #0179e9;
  height:auto;
  width:auto;
  border: none;
  color: white;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 18px;
  margin: 6px 3px;
  cursor: pointer;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  grid-column: 3 / 4;
  grid-row: 3 / 4;

}
.Veza{
  font-size: 1.2rem;
  font-weight: bold;
  color: #7e000098;
  box-sizing: content-box;
  align-self:centar;
  grid-column: 2 / 3;
  grid-row: 1 / 2;
}
.grid3{
  position: absolute;
  padding: 10px;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows:50px 50px 50px 50px 50px ;
}
.card-title4 {
  font-size: 1.2rem;
  font-weight: bold;
  color: #034078;
  box-sizing: content-box;
  align-self:centar;
  grid-column: 2 / 3;
  grid-row: 1 / 2;
}
.custom-select{
  width: auto;
  align-self:center;
  grid-column: 1 / 2;
  grid-row: 2 / 3;
}
.slider {
  -webkit-appearance: none;
  margin: 0 auto;
  width: 100%;
  height: 15px;
  border-radius: 10px;
  background: #FFD65C;
  outline: none;
}
.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: #034078;
  cursor: pointer;
}
.slider::-moz-range-thumb {
  width: 30px;
  height: 30px;
  border-radius: 50% ;
  background: #034078;
  cursor: pointer;
}
.sliderCon1{
  grid-column: 1 / 4;
  grid-row: 3 / 4;
  padding-top: 10px;
}
.sliderCon2{
  grid-column: 1 / 4;
  grid-row: 4 / 5;
  padding-top: 10px;
}
.sliderCon3{
  grid-column: 1 / 4;
  grid-row: 5 / 6;
  padding-top: 10px;
}
.state10{
  font-size: 1.2rem;
  color: #0400d3;
  position: relative;
  bottom:40%;
  right:40%;
}
.Primjeni {
  background-color: #0400d3;
  border: none;
  color: white;
  height:auto;
  width:auto;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 18px;
  margin: 6px 3px;
  cursor: pointer;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  grid-column: 3 / 4;
  grid-row: 2 / 3;
}
.Naslov{
  border: none;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 18px;
  margin: 6px 3px;
  grid-column: 1 / 2;
  grid-row: 2 / 3;
}
.Naslov2{
  border: none;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 18px;
  margin: 6px 3px;
  grid-column: 3 / 4;
  grid-row: 2 / 3;
}
.GlavniNaslov{
  border: none;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 18px;
  font:bold;
  margin: 6px 3px;
  grid-column: 2 / 3;
  grid-row: 1 / 2;
}

    </style>
<head>
    <title>Spider</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/png" href="favicon.png">

</head>
<body>
        <div class="topnav">
        <h1>Pauk</h1>
    </div>
    <div class="content">
        <div class="card-grid">
            <div class="card">
                <p class="card-title">KAMERA</p>
                <p class="switch">
                    <img src="" id="photo" >
                </p>
            </div>
            <div class="card">
                    <div class="grid">
                        <p class="card-title2"> Joystick</p>
                        <p class="Veza"><span id="Spoj">Not connected</span></p>
                        <tr><td colspan="3" ><button class="button2" onmousedown="Stop();" ontouchstart="Stop();">STOP</button></td></tr>
                        <tr><td colspan="3" ><button id="buttonUp" onclick="moveup()"  ontouchstart="moveup()">UP</button></td></tr>
                        <tr><td colspan="3" ><button id="buttonDown" onclick="movedown()"  ontouchstart="movedown()">DOWN</button></td></tr>
                        <tr><td colspan="3" ><button id="buttonLeft" onclick="moveleft()"  ontouchstart="moveleft()">LEFT</button></td></tr>
                        <tr><td colspan="3" ><button id="buttonRight" onclick="moveright()"  ontouchstart="moveright()">RIGHT</button></td></tr>
                        <tr><td colspan="3" ><button id="PocetniPolozaj" onmousedown="Slanje('PocetniPolozaj','PocetniPolozaj')" onmouseup="KlikStop('PocetniPolozaj')"  ontouchstart="Slanje('PocetniPolozaj','PocetniPolozaj')" ontouchend="KlikStop('PocetniPolozaj')">Pocetni</button></td></tr>
                        <tr><td colspan="3" ><button id="GlideButton" onclick="glide()" ontouchstart="glide()">GLIDE</button></td></tr>
                        <div class="box4"><span id="Orjentacija">STOP</span></div>
                    </div>
            </div>
            <div class="card">
                <div class="raspored">
                <p class="card-title3">Senzor</p>
                    <tr><td colspan="3" align="center"><button id="button1" onmousedown="getValues();" >Senzor</button></td></tr>
                    <div class="state">Lijevo[cm]:<br><p class="box1"><span id="senzor1"></span></p><br></div> 
                    <div class="state2">Ispred[cm]:<br><p class="box2"> <span id="senzor2"></span></p></br></div>
                    <div class="state3">Desno[cm]:<br><p class="box3">  <span id="senzor3"></span></p></br></div>
                    
                </div>
            </div>
            <div class="card">
                <div class="grid2"> 
                    <div class="GlavniNaslov">Postavke</div> 
                    <div class="Naslov">Brzina kretanja</div> 
                    <div class="Naslov2">Visina</div>      
                    <input type="number" id="delay" onchange="Pauza()" value = "7" min="1" max="10" step="0.5">
                    <input type="number" id="visina" onchange="Visina()" value = "-140" min="-160" max="-100" step="10">
                </div>
        </div>
        <div class="card">
            <div class="grid3">
                <p class="card-title4">Precizna kontrola</p>
                <div class="custom-select">
                    <select id = "Odabir">
                      <option value="1">PrvaNoga</option>
                      <option value="2">DrugaNoga</option>
                      <option value="3">TrecaNoga</option>
                      <option value="4">CetvrtaNoga</option>
                      <option value="5">PetaNoga</option>
                      <option value="6">SestaNoga</option>
                    </select>
                </div>
                <tr><td colspan="3" ><button class="Primjeni" onmousedown="Primjeni();" ontouchstart="Primjeni();">Primjeni</button></td></tr>
                <div class="sliderCon1"><input type="range" onchange="updateSliderPWM(this)" min="-90" max="90" step="1" value="0" class="slider" id="Value1">
                    <p class="state10">Kut: <span id="sliderValue1">0</span>&deg;</p>
                </div>
                <div class="sliderCon2"><input type="range" onchange="updateSliderPWM(this)" min="-90" max="90" step="1" value="0" class="slider" id="Value2">
                    <p class="state10">Kut: <span id="sliderValue2">0</span>&deg;</p>
                </div>
                <div class="sliderCon3"><input type="range" onchange="updateSliderPWM(this)" min="0" max="180" step="1" value="90" class="slider" id="Value3">
                    <p class="state10">Kut: <span id="sliderValue3">90</span>&deg;</p>
                </div>
                   
            </div>
        </div>    
        </div>
    </div>
</body>
    
    <script>
    
var gateway = 'ws://'+'192.168.147.144'+':81/';
var websocket;
var Noga = "PrvaNoga";
let buttonUp = Boolean(false);
let buttonDown = Boolean(false);
let buttonRight = Boolean(false);
let buttonLeft = Boolean(false);
let GlideButton = Boolean(false);
var Orjentacija = "STOP"
var Glide = "OFF"
var Delay = 7;
var Vis = -140;
var Kordinate = {Delay:"0", Z1:"-140", Orjentacija:"STOP", Glide:"OFF"};
var Slider = {Orjentacija:"STOP", BrojSlidera:"0", VrijednostSlidera:"0"};


window.addEventListener('load', onload);

function onload(event) {
    initWebSocket();
}

function initWebSocket() {
    console.log('Trying to open a WebSocket connection‚Ä¶');
    websocket = new WebSocket(gateway);
    websocket.onopen = onOpen;
    websocket.onclose = onClose;
    websocket.onmessage = onMessage;
}

function onOpen(event) {
    console.log('Connection opened');
  document.getElementById("Spoj").innerHTML = "Connected";
  document.getElementById("Spoj").style.color = '#00df25af';
}

function onClose(event) {
    console.log('Connection closed');
  document.getElementById("Spoj").innerHTML = "Not connected";
  document.getElementById("Spoj").style.color = '#7e000098';
    setTimeout(initWebSocket, 2000);
}

function getValues(){
    websocket.send("W");
}

function Stop(){
    slanjeJson(Delay,"STOP",Glide);
  buttonUp = false;
  color(buttonUp,'buttonUp');
  buttonDown = false;
  color(buttonDown,'buttonDown');
  buttonRight = false;
  color(buttonRight,'buttonRight');
  buttonLeft = false;
  color(buttonLeft,'buttonLeft');
  
  
}

function onMessage(event) {
  console.log(event.data);
    const Senzor = JSON.parse(event.data);
    console.log(Senzor);
  console.log(Senzor.Lijevo);
    document.getElementById("senzor1").innerHTML = Senzor.Lijevo;
    document.getElementById("senzor2").innerHTML = Senzor.Desno;
    document.getElementById("senzor3").innerHTML = Senzor.Ispred;
}

window.onload = document.getElementById("photo").src = window.location.href.slice(0, -1) + ":82/stream";

function Slanje(x,id_buttona){
  console.log(x);
  console.log(id_buttona);
  document.getElementById(id_buttona).style.backgroundColor = '#00ff37';
  slanjeJson(Delay,x,Glide);
  
}

function KlikStop(id_buttona){
  document.getElementById(id_buttona).style.backgroundColor = '';

}

function moveup() {
  buttonUp = !buttonUp;
  pisanje();
  color(buttonUp,'buttonUp');
}
  
function movedown() {
  buttonDown = !buttonDown;
  pisanje();
  color(buttonDown,'buttonDown');
}
  
function moveleft() {
  buttonLeft = !buttonLeft;
  pisanje();
  color(buttonLeft,'buttonLeft');
}
  
function moveright() {
  buttonRight = !buttonRight;
  pisanje();
  color(buttonRight,'buttonRight');
}

function glide() {
  GlideButton = !GlideButton;
  if (GlideButton == false){
    Glide = "OFF";
  }
  else{
    Glide = "ON";
  }
  color(GlideButton,'GlideButton');
  console.log(Glide);
}

function Pauza(){
  Delay = document.getElementById("delay").value;
  console.log(Delay); 
}
function Visina(){
  Vis = document.getElementById("visina").value;
  console.log(Vis); 
}


function slanjeJson(x, Orjentacija,Glide,Vis){
  Kordinate['Delay'] = x;
  Kordinate['Z1'] = Vis;
  Kordinate['Orjentacija'] = Orjentacija;
  Kordinate['Glide'] = Glide;
  websocket.send("4a"+JSON.stringify(Kordinate));
  console.log("4a"+JSON.stringify(Kordinate));
  document.getElementById("Orjentacija").innerHTML = Orjentacija;
  
}

function pisanje(){
if (buttonUp == true && buttonDown==false && buttonLeft == false && buttonRight==false){
  slanjeJson(Delay,"Naprijed",Glide,Vis)
}

else if (buttonUp == true && buttonDown==false && buttonLeft == false && buttonRight==true){
  slanjeJson(Delay,"Lagano desno",Glide,Vis)
}

else if (buttonUp == true && buttonDown==false && buttonLeft == true && buttonRight==false){
  slanjeJson(Delay,"Lagano lijevo",Glide,Vis)
}

else if (buttonUp == false && buttonDown==true && buttonLeft == false && buttonRight==false){
  slanjeJson(Delay,"Nazad",Glide,Vis)
}

else if (buttonUp == false && buttonDown==true && buttonLeft == false && buttonRight==true){
  slanjeJson(Delay,"Nazad desno",Glide,Vis)
}

else if (buttonUp == false && buttonDown==true && buttonLeft == true && buttonRight==false){
  slanjeJson(Delay,"Nazad lijevo",Glide,Vis)
}

else if (buttonUp == false && buttonDown==false && buttonLeft == false && buttonRight==true){
  slanjeJson(Delay,"Strogo desno",Glide,Vis)
}

else if (buttonUp == false && buttonDown==false && buttonLeft == true && buttonRight==false){
  slanjeJson(Delay,"Strogo lijevo",Glide,Vis)
}

else if (buttonUp == false && buttonDown==false && buttonLeft == false && buttonRight==false){
  slanjeJson(Delay,"STOP",Glide,Vis)
}
}

function getRandomIntInclusive(min, max) {
  const str = (Math.random() * (max - min) + min).toFixed(2);
  return parseFloat(str)
}

function color(button, id_buttona){

  if (button == true){
    document.getElementById(id_buttona).style.backgroundColor = '#00ff37';
  }
  else{
    document.getElementById(id_buttona).style.backgroundColor = '#e90101';
  }
}

function getSelectedText(elementId){
    var elt = document.getElementById(elementId);

    if (elt.selectedIndex == -1)
        return null;

    return elt.options[elt.selectedIndex].text;
}

function Primjeni(){
  Noga = getSelectedText('Odabir');
  console.log(Noga);
  //document.getElementsByClassName("sliderCon1").min = 0;
}

function updateSliderPWM(element) {
    var sliderNumber = element.id.charAt(element.id.length-1);
    var sliderValue = document.getElementById(element.id).value;
    document.getElementById("sliderValue"+sliderNumber).innerHTML = sliderValue;
  SlanjeSliderVrijednosti(Noga, sliderNumber, sliderValue);
  console.log(Noga, sliderNumber, sliderValue);
}

function SlanjeSliderVrijednosti(Leg, BrojSlidera, VrijednostSlidera){
  Slider['Orjentacija']=Leg;
  Slider['BrojSlidera']=BrojSlidera;
  Slider['VrijednostSlidera']=VrijednostSlidera;
  websocket.send("XX"+JSON.stringify(Slider));
  console.log("XX"+JSON.stringify(Slider)); 
}

    </script>
</body>
</html>
)rawliteral";

static esp_err_t index_handler(httpd_req_t *req){
  httpd_resp_set_type(req, "text/html");
  return httpd_resp_send(req, (const char *)INDEX_HTML, strlen(INDEX_HTML));
}

static esp_err_t stream_handler(httpd_req_t *req){
  camera_fb_t * fb = NULL;
  esp_err_t res = ESP_OK;
  size_t _jpg_buf_len = 0;
  uint8_t * _jpg_buf = NULL;
  char * part_buf[64];

  res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);
  if(res != ESP_OK){
    return res;
  }

  while(true){
    fb = esp_camera_fb_get();
    if (!fb) {
      Serial.println("Camera capture failed");
      res = ESP_FAIL;
    } else {
      if(fb->width > 400){
        if(fb->format != PIXFORMAT_JPEG){
          bool jpeg_converted = frame2jpg(fb, 80, &_jpg_buf, &_jpg_buf_len);
          esp_camera_fb_return(fb);
          fb = NULL;
          if(!jpeg_converted){
            Serial.println("JPEG compression failed");
            res = ESP_FAIL;
          }
        } else {
          _jpg_buf_len = fb->len;
          _jpg_buf = fb->buf;
        }
      }
    }
    if(res == ESP_OK){
      size_t hlen = snprintf((char *)part_buf, 64, _STREAM_PART, _jpg_buf_len);
      res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);
    }
    if(res == ESP_OK){
      res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);
    }
    if(res == ESP_OK){
      res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));
    }
    if(fb){
      esp_camera_fb_return(fb);
      fb = NULL;
      _jpg_buf = NULL;
    } else if(_jpg_buf){
      free(_jpg_buf);
      _jpg_buf = NULL;
    }
    if(res != ESP_OK){
      break;
    }
    //Serial.printf("MJPG: %uB\n",(uint32_t)(_jpg_buf_len));
  }
  return res;
}

static esp_err_t cmd_handler(httpd_req_t *req){
  char*  buf;
  size_t buf_len;
  char variable[32] = {0,};
  
  buf_len = httpd_req_get_url_query_len(req) + 1;
  if (buf_len > 1) {
    buf = (char*)malloc(buf_len);
    if(!buf){
      httpd_resp_send_500(req);
      return ESP_FAIL;
    }
    if (httpd_req_get_url_query_str(req, buf, buf_len) == ESP_OK) {
      if (httpd_query_key_value(buf, "go", variable, sizeof(variable)) == ESP_OK) {
      } else {
        free(buf);
        httpd_resp_send_404(req);
        return ESP_FAIL;
      }
    } else {
      free(buf);
      httpd_resp_send_404(req);
      return ESP_FAIL;
    }
    free(buf);
  } else {
    httpd_resp_send_404(req);
    return ESP_FAIL;
  }

  sensor_t * s = esp_camera_sensor_get();
  int res = 0;
   

  if(res){
    return httpd_resp_send_500(req);
  }

  httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
  return httpd_resp_send(req, NULL, 0);
}


void startCameraServer(){
  httpd_config_t config = HTTPD_DEFAULT_CONFIG();
  config.server_port = 80;
  httpd_uri_t index_uri = {
    .uri       = "/",
    .method    = HTTP_GET,
    .handler   = index_handler,
    .user_ctx  = NULL
  };

  httpd_uri_t cmd_uri = {
    .uri       = "/action",
    .method    = HTTP_GET,
    .handler   = cmd_handler,
    .user_ctx  = NULL
  };
  httpd_uri_t stream_uri = {
    .uri       = "/stream",
    .method    = HTTP_GET,
    .handler   = stream_handler,
    .user_ctx  = NULL
  };
  if (httpd_start(&camera_httpd, &config) == ESP_OK) {
    httpd_register_uri_handler(camera_httpd, &index_uri);
    httpd_register_uri_handler(camera_httpd, &cmd_uri);
  }
  config.server_port += 2;
  config.ctrl_port += 2;
  if (httpd_start(&stream_httpd, &config) == ESP_OK) {
    httpd_register_uri_handler(stream_httpd, &stream_uri);
  }
}



void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0); //disable brownout detector
  
 
  Serial.begin(115200);
  Serial.setDebugOutput(false);

  Wifi();
  
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG; 
  
  if(psramFound()){
    config.frame_size = FRAMESIZE_VGA;
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }
  
  // Camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
  }
  // Start streaming web server
  startCameraServer();
}

void loop() {
    
}

void Wifi(){
// Wi-Fi connection
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  
  Serial.print("Camera Stream Ready! Go to: http://");
  Serial.println(WiFi.localIP());
  
}
